// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class FriendMessage;

// ===================================================================

class FriendMessage : public ::google::protobuf::Message {
 public:
  FriendMessage();
  virtual ~FriendMessage();

  FriendMessage(const FriendMessage& from);

  inline FriendMessage& operator=(const FriendMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendMessage& default_instance();

  void Swap(FriendMessage* other);

  // implements Message ----------------------------------------------

  FriendMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendMessage& from);
  void MergeFrom(const FriendMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fromuid = 1;
  inline bool has_fromuid() const;
  inline void clear_fromuid();
  static const int kFromuidFieldNumber = 1;
  inline ::google::protobuf::uint32 fromuid() const;
  inline void set_fromuid(::google::protobuf::uint32 value);

  // required uint32 touid = 2;
  inline bool has_touid() const;
  inline void clear_touid();
  static const int kTouidFieldNumber = 2;
  inline ::google::protobuf::uint32 touid() const;
  inline void set_touid(::google::protobuf::uint32 value);

  // required uint32 servermessageid = 3;
  inline bool has_servermessageid() const;
  inline void clear_servermessageid();
  static const int kServermessageidFieldNumber = 3;
  inline ::google::protobuf::uint32 servermessageid() const;
  inline void set_servermessageid(::google::protobuf::uint32 value);

  // required uint32 clientmessageid = 4;
  inline bool has_clientmessageid() const;
  inline void clear_clientmessageid();
  static const int kClientmessageidFieldNumber = 4;
  inline ::google::protobuf::uint32 clientmessageid() const;
  inline void set_clientmessageid(::google::protobuf::uint32 value);

  // required uint32 servertime = 5;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 5;
  inline ::google::protobuf::uint32 servertime() const;
  inline void set_servertime(::google::protobuf::uint32 value);

  // required uint32 clienttime = 6;
  inline bool has_clienttime() const;
  inline void clear_clienttime();
  static const int kClienttimeFieldNumber = 6;
  inline ::google::protobuf::uint32 clienttime() const;
  inline void set_clienttime(::google::protobuf::uint32 value);

  // required uint32 messagetype = 7;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessagetypeFieldNumber = 7;
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional string content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 fontdefault = 9;
  inline bool has_fontdefault() const;
  inline void clear_fontdefault();
  static const int kFontdefaultFieldNumber = 9;
  inline ::google::protobuf::uint32 fontdefault() const;
  inline void set_fontdefault(::google::protobuf::uint32 value);

  // optional string fontface = 10;
  inline bool has_fontface() const;
  inline void clear_fontface();
  static const int kFontfaceFieldNumber = 10;
  inline const ::std::string& fontface() const;
  inline void set_fontface(const ::std::string& value);
  inline void set_fontface(const char* value);
  inline void set_fontface(const char* value, size_t size);
  inline ::std::string* mutable_fontface();
  inline ::std::string* release_fontface();
  inline void set_allocated_fontface(::std::string* fontface);

  // optional uint32 fontsize = 11;
  inline bool has_fontsize() const;
  inline void clear_fontsize();
  static const int kFontsizeFieldNumber = 11;
  inline ::google::protobuf::uint32 fontsize() const;
  inline void set_fontsize(::google::protobuf::uint32 value);

  // optional uint32 fontcolor = 12;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontcolorFieldNumber = 12;
  inline ::google::protobuf::uint32 fontcolor() const;
  inline void set_fontcolor(::google::protobuf::uint32 value);

  // optional uint32 fontflag = 13;
  inline bool has_fontflag() const;
  inline void clear_fontflag();
  static const int kFontflagFieldNumber = 13;
  inline ::google::protobuf::uint32 fontflag() const;
  inline void set_fontflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendMessage)
 private:
  inline void set_has_fromuid();
  inline void clear_has_fromuid();
  inline void set_has_touid();
  inline void clear_has_touid();
  inline void set_has_servermessageid();
  inline void clear_has_servermessageid();
  inline void set_has_clientmessageid();
  inline void clear_has_clientmessageid();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_clienttime();
  inline void clear_has_clienttime();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_fontdefault();
  inline void clear_has_fontdefault();
  inline void set_has_fontface();
  inline void clear_has_fontface();
  inline void set_has_fontsize();
  inline void clear_has_fontsize();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();
  inline void set_has_fontflag();
  inline void clear_has_fontflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromuid_;
  ::google::protobuf::uint32 touid_;
  ::google::protobuf::uint32 servermessageid_;
  ::google::protobuf::uint32 clientmessageid_;
  ::google::protobuf::uint32 servertime_;
  ::google::protobuf::uint32 clienttime_;
  ::std::string* content_;
  ::google::protobuf::uint32 messagetype_;
  ::google::protobuf::uint32 fontdefault_;
  ::std::string* fontface_;
  ::google::protobuf::uint32 fontsize_;
  ::google::protobuf::uint32 fontcolor_;
  ::google::protobuf::uint32 fontflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FriendMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendMessage

// required uint32 fromuid = 1;
inline bool FriendMessage::has_fromuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendMessage::set_has_fromuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendMessage::clear_has_fromuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendMessage::clear_fromuid() {
  fromuid_ = 0u;
  clear_has_fromuid();
}
inline ::google::protobuf::uint32 FriendMessage::fromuid() const {
  return fromuid_;
}
inline void FriendMessage::set_fromuid(::google::protobuf::uint32 value) {
  set_has_fromuid();
  fromuid_ = value;
}

// required uint32 touid = 2;
inline bool FriendMessage::has_touid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendMessage::set_has_touid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendMessage::clear_has_touid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendMessage::clear_touid() {
  touid_ = 0u;
  clear_has_touid();
}
inline ::google::protobuf::uint32 FriendMessage::touid() const {
  return touid_;
}
inline void FriendMessage::set_touid(::google::protobuf::uint32 value) {
  set_has_touid();
  touid_ = value;
}

// required uint32 servermessageid = 3;
inline bool FriendMessage::has_servermessageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendMessage::set_has_servermessageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendMessage::clear_has_servermessageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendMessage::clear_servermessageid() {
  servermessageid_ = 0u;
  clear_has_servermessageid();
}
inline ::google::protobuf::uint32 FriendMessage::servermessageid() const {
  return servermessageid_;
}
inline void FriendMessage::set_servermessageid(::google::protobuf::uint32 value) {
  set_has_servermessageid();
  servermessageid_ = value;
}

// required uint32 clientmessageid = 4;
inline bool FriendMessage::has_clientmessageid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendMessage::set_has_clientmessageid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendMessage::clear_has_clientmessageid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendMessage::clear_clientmessageid() {
  clientmessageid_ = 0u;
  clear_has_clientmessageid();
}
inline ::google::protobuf::uint32 FriendMessage::clientmessageid() const {
  return clientmessageid_;
}
inline void FriendMessage::set_clientmessageid(::google::protobuf::uint32 value) {
  set_has_clientmessageid();
  clientmessageid_ = value;
}

// required uint32 servertime = 5;
inline bool FriendMessage::has_servertime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendMessage::set_has_servertime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendMessage::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendMessage::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 FriendMessage::servertime() const {
  return servertime_;
}
inline void FriendMessage::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
}

// required uint32 clienttime = 6;
inline bool FriendMessage::has_clienttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendMessage::set_has_clienttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendMessage::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendMessage::clear_clienttime() {
  clienttime_ = 0u;
  clear_has_clienttime();
}
inline ::google::protobuf::uint32 FriendMessage::clienttime() const {
  return clienttime_;
}
inline void FriendMessage::set_clienttime(::google::protobuf::uint32 value) {
  set_has_clienttime();
  clienttime_ = value;
}

// required uint32 messagetype = 7;
inline bool FriendMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendMessage::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 FriendMessage::messagetype() const {
  return messagetype_;
}
inline void FriendMessage::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
}

// optional string content = 8;
inline bool FriendMessage::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendMessage::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FriendMessage::content() const {
  return *content_;
}
inline void FriendMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FriendMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FriendMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* FriendMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 fontdefault = 9;
inline bool FriendMessage::has_fontdefault() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendMessage::set_has_fontdefault() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendMessage::clear_has_fontdefault() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendMessage::clear_fontdefault() {
  fontdefault_ = 0u;
  clear_has_fontdefault();
}
inline ::google::protobuf::uint32 FriendMessage::fontdefault() const {
  return fontdefault_;
}
inline void FriendMessage::set_fontdefault(::google::protobuf::uint32 value) {
  set_has_fontdefault();
  fontdefault_ = value;
}

// optional string fontface = 10;
inline bool FriendMessage::has_fontface() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendMessage::set_has_fontface() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendMessage::clear_has_fontface() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendMessage::clear_fontface() {
  if (fontface_ != &::google::protobuf::internal::kEmptyString) {
    fontface_->clear();
  }
  clear_has_fontface();
}
inline const ::std::string& FriendMessage::fontface() const {
  return *fontface_;
}
inline void FriendMessage::set_fontface(const ::std::string& value) {
  set_has_fontface();
  if (fontface_ == &::google::protobuf::internal::kEmptyString) {
    fontface_ = new ::std::string;
  }
  fontface_->assign(value);
}
inline void FriendMessage::set_fontface(const char* value) {
  set_has_fontface();
  if (fontface_ == &::google::protobuf::internal::kEmptyString) {
    fontface_ = new ::std::string;
  }
  fontface_->assign(value);
}
inline void FriendMessage::set_fontface(const char* value, size_t size) {
  set_has_fontface();
  if (fontface_ == &::google::protobuf::internal::kEmptyString) {
    fontface_ = new ::std::string;
  }
  fontface_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendMessage::mutable_fontface() {
  set_has_fontface();
  if (fontface_ == &::google::protobuf::internal::kEmptyString) {
    fontface_ = new ::std::string;
  }
  return fontface_;
}
inline ::std::string* FriendMessage::release_fontface() {
  clear_has_fontface();
  if (fontface_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fontface_;
    fontface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendMessage::set_allocated_fontface(::std::string* fontface) {
  if (fontface_ != &::google::protobuf::internal::kEmptyString) {
    delete fontface_;
  }
  if (fontface) {
    set_has_fontface();
    fontface_ = fontface;
  } else {
    clear_has_fontface();
    fontface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 fontsize = 11;
inline bool FriendMessage::has_fontsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendMessage::set_has_fontsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendMessage::clear_has_fontsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendMessage::clear_fontsize() {
  fontsize_ = 0u;
  clear_has_fontsize();
}
inline ::google::protobuf::uint32 FriendMessage::fontsize() const {
  return fontsize_;
}
inline void FriendMessage::set_fontsize(::google::protobuf::uint32 value) {
  set_has_fontsize();
  fontsize_ = value;
}

// optional uint32 fontcolor = 12;
inline bool FriendMessage::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendMessage::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendMessage::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendMessage::clear_fontcolor() {
  fontcolor_ = 0u;
  clear_has_fontcolor();
}
inline ::google::protobuf::uint32 FriendMessage::fontcolor() const {
  return fontcolor_;
}
inline void FriendMessage::set_fontcolor(::google::protobuf::uint32 value) {
  set_has_fontcolor();
  fontcolor_ = value;
}

// optional uint32 fontflag = 13;
inline bool FriendMessage::has_fontflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FriendMessage::set_has_fontflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FriendMessage::clear_has_fontflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FriendMessage::clear_fontflag() {
  fontflag_ = 0u;
  clear_has_fontflag();
}
inline ::google::protobuf::uint32 FriendMessage::fontflag() const {
  return fontflag_;
}
inline void FriendMessage::set_fontflag(::google::protobuf::uint32 value) {
  set_has_fontflag();
  fontflag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
