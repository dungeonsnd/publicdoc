/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "message_types.h"

#include <algorithm>



const char* FriendMessage::ascii_fingerprint = "DAD4FCEC9A3CBDC65DE17E5AF1F16AE1";
const uint8_t FriendMessage::binary_fingerprint[16] = {0xDA,0xD4,0xFC,0xEC,0x9A,0x3C,0xBD,0xC6,0x5D,0xE1,0x7E,0x5A,0xF1,0xF1,0x6A,0xE1};

uint32_t FriendMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fromuid);
          this->__isset.fromuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->touid);
          this->__isset.touid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->servermessageid);
          this->__isset.servermessageid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clientmessageid);
          this->__isset.clientmessageid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->servertime);
          this->__isset.servertime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clienttime);
          this->__isset.clienttime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagetype);
          this->__isset.messagetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fontdefault);
          this->__isset.fontdefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fontface);
          this->__isset.fontface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fontsize);
          this->__isset.fontsize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fontcolor);
          this->__isset.fontcolor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fontflag);
          this->__isset.fontflag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FriendMessage");

  xfer += oprot->writeFieldBegin("fromuid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->fromuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("touid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->touid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servermessageid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->servermessageid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientmessageid", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->clientmessageid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servertime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->servertime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clienttime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->clienttime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messagetype", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->messagetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fontdefault", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->fontdefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fontface", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->fontface);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fontsize", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->fontsize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fontcolor", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->fontcolor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fontflag", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->fontflag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendMessage &a, FriendMessage &b) {
  using ::std::swap;
  swap(a.fromuid, b.fromuid);
  swap(a.touid, b.touid);
  swap(a.servermessageid, b.servermessageid);
  swap(a.clientmessageid, b.clientmessageid);
  swap(a.servertime, b.servertime);
  swap(a.clienttime, b.clienttime);
  swap(a.messagetype, b.messagetype);
  swap(a.content, b.content);
  swap(a.fontdefault, b.fontdefault);
  swap(a.fontface, b.fontface);
  swap(a.fontsize, b.fontsize);
  swap(a.fontcolor, b.fontcolor);
  swap(a.fontflag, b.fontflag);
  swap(a.__isset, b.__isset);
}


